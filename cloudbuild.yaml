steps:
  # Step 1: Run automated tests
  - name: 'python:3.11-slim'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install -r requirements.txt
        # Run your tests here; for example, if you use pytest:
        pytest --maxfail=1 --disable-warnings -q

  # Step 2: Build the container image using Buildpacks
  - name: 'gcr.io/buildpacks/builder'
    args: [
      'build',
      'gcr.io/$PROJECT_ID/flask-gemini-app:$SHORT_SHA'
    ]

  # Note: Cloud Build automatically pushes the image when using the --pack flag.

  # Step 3: Deploy the revision with BACKGROUND_COLOR set to blue
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy flask-gemini-app \
          --image gcr.io/$PROJECT_ID/flask-gemini-app:$SHORT_SHA \
          --platform managed \
          --region us-central1 \
          --set-env-vars BACKGROUND_COLOR=blue \
          --allow-unauthenticated

  # Step 4: Deploy another revision with BACKGROUND_COLOR set to green
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run deploy flask-gemini-app \
          --image gcr.io/$PROJECT_ID/flask-gemini-app:$SHORT_SHA \
          --platform managed \
          --region us-central1 \
          --set-env-vars BACKGROUND_COLOR=green \
          --allow-unauthenticated

  # Step 5: Update traffic splitting to route 50% traffic to each revision.
  # (Replace REVISION_BLUE and REVISION_GREEN with actual revision names from deploy output)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud run services update-traffic flask-gemini-app \
          --region us-central1 \
          --to-revisions REVISION_BLUE=50,REVISION_GREEN=50

images:
  - 'gcr.io/$PROJECT_ID/flask-gemini-app:$SHORT_SHA'